name: Build and deploy Kidsloop Backstage app
on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  CI: true
  NODE_OPTIONS: --max-old-space-size=4096
  IMAGE_NAME: kl-backstage
  IMAGE_TAGS: v1 ${{ github.sha }}
  REGISTRY: ghcr.io

permissions:
  id-token: write
  contents: read # This is required for actions/checkout
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: "recursive"
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - shell: bash
        run: |
          touch github-app-backstage-kidsloop-dev-portal-credentials.yaml

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch

      # Beginning of yarn setup, keep in sync between all workflows, see ci.yml
      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://registry.npmjs.org/ # Needed for auth

      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-v${{ matrix.node-version }}-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}

      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: cache global yarn cache
        uses: actions/cache@v3
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: yarn install
        run: yarn install --frozen-lockfile
      # End of yarn setup

      - name: validate config
        run: yarn backstage-cli config:check --lax

      - name: lint
        run: yarn backstage-cli repo lint

      - name: type checking and declarations
        run: yarn tsc:full

      - name: build
        run: yarn backstage-cli repo build --all
 
      - name: build-image
        run: npm run build-image
      # - name: verify type dependencies
      #   run: yarn lint:type-deps

      - name: list docker images
        shell: bash
        run: docker image ls
      
      - name: tag image
        run: |
          repo=$(echo 'console.log("${{ github.repository }}".toLowerCase())' | node -)
          docker tag backstage:latest ${{ env.REGISTRY }}/kl-engineering/${repo}:latest

      - shell: bash 
        run: |
          repo=$(echo 'console.log("${{ github.repository }}".toLowerCase())' | node -)
          docker push ${{ env.REGISTRY }}/kl-engineering/${repo}:latest

      # Push the image to GHCR (Image Registry)
      # - name: Push To GHCR
      #   id: push
      #   with:
      #     image: backstage
      #     tags: ${{ steps.meta.outputs.tags }}
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      #     extra-args: |
      #       --disable-content-trust
